import socket
import threading
import json
import tkinter as tk
from tkinter import scrolledtext, messagebox
from datetime import datetime

# Global socket and client name
client_socket = None
name = None

# Connect to the chat server
def connect_to_server(host='127.0.0.1', port=8888):
    global client_socket
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((host, port))
    return client_socket

# Function to set the user's name
def set_name():
    global name
    name = name_entry.get().strip()

    if not name:
        messagebox.showwarning("Name Required", "Please enter a name.")
        return  # Prevent empty names

    name_entry.config(state="disabled")
    name_button.pack_forget()
    client_socket.send(name.encode())

    timestamp = datetime.now().strftime("%H:%M:%S")
    message_display.insert("end", f"[{timestamp}] Welcome to the chat, {name}\n", "system")
    message_display.see("end")

# Function to receive messages from the server
def receive_messages():
    while True:
        try:
            data = client_socket.recv(1024)
            if not data:
                break

            message = json.loads(data.decode())
            message_display.insert("end", f"[{message['timestamp']}] {message['name']}: {message['text']}\n", "receiver")
            message_display.see("end")

        except (json.JSONDecodeError, ConnectionResetError) as e:
            messagebox.showerror("Connection Error", "Connection lost. Exiting...")
            break

# Function to send messages
def send_message():
    message_text = message_entry.get()  # Get message from input field

    if message_text:  # Check if message is not empty
        message = {"text": message_text}

        try:
            client_socket.send(json.dumps(message).encode())  # Send JSON message
        except Exception as e:
            print(f"Error sending message: {e}")
            messagebox.showerror("Send Error", "Failed to send the message.")
            return  # Exit function if sending fails

        timestamp = datetime.now().strftime("%H:%M:%S")  # Format timestamp
        
        # Display the message in the sender's chat window
        message_display.insert("end", f"[{timestamp}] You: {message_text}\n", "sender")
        message_display.see("end")
        message_entry.delete(0, "end")  # Clear input field
        window.update()

# Function to create GUI
def create_window():
    global window, name_entry, name_button, message_display, message_entry

    window = tk.Tk()
    window.title("Chat Client")

    name_frame = tk.Frame(window)
    name_frame.pack(fill="x")

    name_label = tk.Label(name_frame, text="Enter your name:")
    name_label.pack(side="left")

    name_entry = tk.Entry(name_frame)
    name_entry.pack(side="left")

    name_button = tk.Button(name_frame, text="Set Name", command=set_name)
    name_button.pack(side="left")

    message_display = scrolledtext.ScrolledText(window, wrap=tk.WORD)
    message_display.tag_config("sender", foreground="#228B22")  # Green for sent messages
    message_display.tag_config("receiver", foreground="#FF5733")  # Orange for received messages
    message_display.pack(fill="both", expand=True)

    message_entry = tk.Entry(window)
    message_entry.pack(fill="x")

    send_button = tk.Button(window, text="Send", command=send_message)
    send_button.pack()

    # Handle window closing
    window.protocol("WM_DELETE_WINDOW", on_closing)

# Function to handle cleanup when closing the window
def on_closing():
    try:
        client_socket.shutdown(socket.SHUT_RDWR)
        client_socket.close()
    except Exception as e:
        print(f"Error closing socket: {e}")
    window.quit()

# Function to start a daemon thread for receiving messages
def start_daemon_thread():
    message_thread = threading.Thread(target=receive_messages, daemon=True)
    message_thread.start()

def main():
    try:
        connect_to_server()
        create_window()
        start_daemon_thread()
        window.mainloop()  # Only call once, no while loop

    except Exception as e:
        messagebox.showerror("Connection Error", f"Could not connect to server: {e}")
    finally:
        if client_socket:
            client_socket.close()

if __name__ == '__main__':
    main()